{"version":3,"sources":["model.ts","components/sidebarPanel/SidebarPanel.tsx","utils.ts","components/sidebar/Sidebar.tsx","components/displayContainer/DisplayContainer.tsx","components/imageGallery/ImageGallery.tsx","fakeData.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Model","imageList","selectedImageId","imageStore","getAllImages","Object","keys","reduce","id","image","getSelectedImageId","editCaption","newCaption","caption","editSelectedImageId","newId","this","imageStoreObj","SidebarPanel","props","captionRef","truncateCaption","current","domElement","elementInnerText","maxNumberOfLines","maxWidth","style","overflow","maxHeight","Number","window","getComputedStyle","lineHeight","slice","width","letters","split","clientHeight","left","right","length","mid","Math","floor","leftletters","filter","_","ind","rightletters","previousInnerText","innerText","join","truncateInnerText","handleDragStart","evt","sidebarElement","target","classList","toggle","dataset","sidebarPanelDragging","handleDragEnd","React","createRef","src","isSelected","className","tabIndex","onClick","onSelectedImageIdChange","draggable","onDragStart","onDragEnd","height","alt","ref","Component","Sidebar","findClosestPanelBelow","yPos","sidebarPanels","Array","from","closest","sidebarPanel","boundingBox","getClientRects","midPoint","top","offset","closestPanelBelow","NEGATIVE_INFINITY","handleDragOver","console","log","draggingSidebarPanel","document","querySelector","querySelectorAll","clientY","draggingSidebarPanelId","sidebarPanelId","closestPanelBelowIndex","images","findIndex","onImageOrderChange","addEventListener","key","activeElement","getAttribute","onDragOver","eventHandler","timer","args","self","cancelAnimationFrame","requestAnimationFrame","apply","undefined","eventDeboune","map","DisplayContainer","onImageCaptionChange","value","onChange","ImageGallery","state","handleSelectedImageIdChange","newSelectedImageId","setState","model","handleImageCaptionChange","imageId","prevState","handleImageOrderChange","newPos","imageToBeInserted","find","filteredList","selectedImage","fakeImageData","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wUAGMA,EAKF,WAAYC,EAAwBC,GAA0B,IAAD,gCAH7DC,gBAG6D,OAF7DD,qBAE6D,OAS7DE,aAAe,WACX,OAAOC,OAAOC,KAAK,EAAKH,YAAYI,QAChC,SAACN,EAAWO,GACV,IAAMC,EAAQ,EAAKN,WAAWK,GAK9B,OAJIC,IACFR,EAAS,sBAAOA,GAAP,CAAkBQ,KAGtBR,IAET,KAnBqD,KAuB7DS,mBAAqB,kBAAc,EAAKR,iBAvBqB,KAyB7DS,YAAc,SAACH,EAAYI,GACvB,IAAIH,EAAQ,EAAKN,WAAWK,GAC5B,OAAIC,GACAA,EAAK,2BAAQA,GAAR,IAAeI,QAASD,IAC7B,EAAKT,WAAWK,GAAMC,EACf,EAAC,EAAMA,IAEP,EAAC,EAAO,OAhCsC,KAoC7DK,oBAAsB,SAACC,GACnB,EAAKb,gBAAkBa,GAnCvBC,KAAKb,WAAaF,EAAUM,QAAO,SAACU,EAA2BR,GAA5B,mBAAC,eAC3BQ,GAD0B,kBACVR,EAAMD,GADI,eACMC,OACtC,IAEHO,KAAKd,gBAAkBA,G,oCCHlBgB,EAAb,kDAGE,WAAYC,GAA2B,IAAD,8BACpC,cAAMA,IAHRC,gBAEsC,IAatCC,gBAAkB,WACZ,EAAKD,WAAWE,SC5BE,SACtBC,EACAC,EACAC,EACAC,GAEAH,EAAWI,MAAMC,SAAW,OAE5B,IAAMC,EACJC,OAAOC,OAAOC,iBAAiBT,GAAYU,WAAWC,MAAM,GAAI,IAChET,EAEEC,IACFH,EAAWI,MAAMQ,MAAQT,GAG3B,IAAMU,EAAUZ,EAAiBa,MAAM,IACvC,GAAId,EAAWe,cAAgBT,EAC7BN,EAAWI,MAAMC,SAAW,aAD9B,CAQA,IAHA,IAAIW,EAAO,EACTC,EAAQJ,EAAQK,OAAS,EAlBxB,aAsBC,IAAMC,EAAMC,KAAKC,MAAML,GAAQC,EAAQD,GAAQ,GAE3CM,EAAcT,EAAQU,QAAO,SAACC,EAAGC,GAAJ,OAAYA,EAAMN,KAC/CO,EAAeb,EAAQU,QAC3B,SAACC,EAAGC,GAAJ,OAAYA,GAAOZ,EAAQK,OAASC,KAGhCQ,EAAoB3B,EAAW4B,UAErC5B,EAAW4B,UAAYN,EAAYO,KAAK,IAAM,MAAQH,EAAaG,KAAK,IAEpE7B,EAAWe,cAAgBT,EAC7BU,EAAOG,EAAM,GAEbnB,EAAW4B,UAAYD,EACvBV,EAAQE,EAAM,IAjBXH,GAAQC,GAAQ,IAqBvBjB,EAAWI,MAAMC,SAAW,UDjB1ByB,CACE,EAAKjC,WAAWE,QAChB,EAAKH,MAAMV,MAAMI,QACjB,EACA,SAnBgC,EAwBtCyC,gBAAkB,SAACC,GACjB,IAAMC,EAAiBD,EAAIE,OAC3BD,EAAeE,UAAUC,OAAO,0BAChCH,EAAeI,QAAQC,qBAAuB,QA3BV,EA8BtCC,cAAgB,SAACP,GACf,IAAMC,EAAiBD,EAAIE,OAC3BD,EAAeE,UAAUC,OAAO,0BAChCH,EAAeI,QAAQC,qBAAuB,SA/B9C,EAAKzC,WAAa2C,IAAMC,YAFY,EAHxC,qDAQE,WACEhD,KAAKK,oBATT,gCAYE,WACEL,KAAKK,oBAbT,oBAuCE,WAAU,IAAD,OACP,EAA6BL,KAAKG,MAAMV,MAAhCD,EAAR,EAAQA,GAAIK,EAAZ,EAAYA,QAASoD,EAArB,EAAqBA,IACnBC,EAAalD,KAAKG,MAAM+C,WAC1B,OACE,sBACEC,UAAS,wBACPD,EAAa,yBAA2B,IAE1CE,SAAU,EACV,wBAAuB5D,EACvB6D,QAAS,WACP,EAAKlD,MAAMmD,wBAAwB9D,IAErC+D,UAAU,OACVC,YAAaxD,KAAKsC,gBAClBmB,UAAWzD,KAAK8C,cAXlB,UAaE,qBACEK,UAAU,sBACVO,OAAO,OACPvC,MAAM,OACN8B,IAAKA,EACLU,IAAK9D,IAEP,sBAAM+D,IAAK5D,KAAKI,WAAY+C,UAAU,wBAAtC,SACGtD,WAhEX,GAAkCkD,IAAMc,WEM3BC,EAAb,4MAgBEC,sBAAwB,SACtBC,EACAC,GAEA,OAAOC,MAAMC,KAAKF,GAAe1E,QAC/B,SAAC6E,EAASC,GACR,IAAMC,EAAcD,EAAaE,iBAAiB,GAChDC,EAAWF,EAAYG,IAAMH,EAAYZ,OAAS,EAClDgB,EAASV,EAAOQ,EAClB,OAAOE,EAAS,GAAKA,EAASN,EAAQM,OAClC,CAAEC,kBAAmBN,EAAcK,UACnCN,IAEN,CACEO,kBAAmB,KACnBD,OAAQ5D,OAAO8D,qBA/BvB,EAoCEC,eAAiB,SAACtC,GAChBuC,QAAQC,IAAI,aACZ,IAAMC,EAAuBC,SAASC,cACpC,wCAEF,GAAIF,EAAsB,CACxB,IAAMf,EAAgBgB,SAASE,iBAC7B,2BAGMR,EAAsB,EAAKZ,sBACjCxB,EAAI6C,QACJnB,GAFMU,kBAKR,GAAIA,GAAqBA,IAAsBK,EAAsB,CACnE,IAAMK,EACJL,EAAqBpC,QAAQ0C,eACzBC,EAAyB,EAAKpF,MAAMqF,OAAOC,WAC/C,SAAChG,GAAD,OAAWA,EAAMD,KAAOmF,EAAkB/B,QAAQ0C,kBAEhDD,GACF,EAAKlF,MAAMuF,mBACTL,EACAE,MA5DZ,uDACE,WAAqB,IAAD,OAClBN,SAASU,iBAAiB,WAAW,SAACpD,GACpC,GAAgB,UAAZA,EAAIqD,KAAmBX,SAASY,cAAe,CACjD,IACMP,EADgBL,SAASY,cACMC,aACnC,yBAGER,GACF,EAAKnF,MAAMmD,wBAAwBgC,SAV7C,oBAmEE,WAAU,IAAD,OACP,EAAoCtF,KAAKG,MAAjCqF,EAAR,EAAQA,OAAQtG,EAAhB,EAAgBA,gBAEhB,OACE,qBACE6G,WAAY,SAACxD,IDxCA,SAACyD,GAClB,IAAIC,EACJ,OAAO,WAAsC,IAAD,uBAAbC,EAAa,yBAAbA,EAAa,gBAC1C,IAAIC,EAAOnG,KACPiG,GACFG,qBAAqBH,GAEvBA,EAAQI,uBAAsB,WAC5BL,EAAaM,MAAMH,EAAnB,UAA6BD,IAC7BD,OAAQM,MCgCNC,CAAa,EAAK3B,eAAlB2B,CAAkCjE,IAEpCY,UAAU,UAJZ,SAMGqC,GACCA,EAAOiB,KAAI,SAAChH,GAAD,OACT,cAAC,EAAD,CAEEA,MAAOA,EACP6D,wBAAyB,EAAKnD,MAAMmD,wBACpCJ,WAAYhE,IAAoBO,EAAMD,IAHjCC,EAAMD,aAhFzB,GAA6BuD,IAAMc,WCTtB6C,G,MAAmB,SAAC,GAGH,IAF5BjH,EAE2B,EAF3BA,MACAkH,EAC2B,EAD3BA,qBAEQnH,EAAqBC,EAArBD,GAAIyD,EAAiBxD,EAAjBwD,IAAKpD,EAAYJ,EAAZI,QASjB,OACE,sBAAKsD,UAAU,oBAAf,UACE,qBACEA,UAAU,0BACVO,OAAO,QACPvC,MAAM,QACN8B,IAAKA,EACLU,IAAK9D,IAEP,0BACEsD,UAAU,4BACVyD,MAAO/G,EACPgH,SAnB2B,SAC/BtE,GAEA,IAAM3C,EAAa2C,EAAIE,OAAOmE,MAC9BD,EAAqBnH,EAAII,WCFhBkH,G,MAAb,kDAME,WAAY3G,GAA2B,IAAD,8BACpC,cAAMA,IAHR4G,WAEsC,IActCC,4BAA8B,SAACC,GAC7B,EAAKC,SAAS,CAAEhI,gBAAiB+H,IACjC,EAAK9G,MAAMgH,MAAMrH,oBAAoBmH,IAhBD,EAmBtCG,yBAA2B,SAACC,EAAiBzH,GAC3C,EAAKsH,UAAS,SAACI,GAAD,MAAgB,CAC5B9B,OAAQ8B,EAAU9B,OAAOiB,KAAI,SAAChH,GAAD,OAC3BA,EAAMD,KAAO6H,EAAU5H,EAAvB,2BAAoCA,GAApC,IAA2CI,QAASD,WAIxD,EAAKO,MAAMgH,MAAMxH,YAAY0H,EAASzH,IA1BF,EA6BtC2H,uBAAyB,SAACF,EAAiBG,GACzC,IAAMC,EAAoB,EAAKV,MAAMvB,OAAOkC,MAC1C,SAACjI,GAAD,OAAWA,EAAMD,KAAO6H,KAG1B,GAAII,EAAmB,CASrB,EAAKP,UAAS,SAACI,GAAD,MAAgB,CAC5B9B,QATqBmC,EAUnBL,EAAU9B,OAAO1D,QAAO,SAACrC,GAAD,OAAWA,EAAMD,KAAO6H,KAT5C,GAAN,mBACKM,EAAazG,MAAM,EAAGsG,IAD3B,CAEEC,GAFF,YAGKE,EAAazG,MAAMsG,OAJJ,IAACG,OAjCzB,EAAKZ,MAAQ,CACXvB,OAAQ,GACRtG,gBAAiB,IAJiB,EANxC,qDAcE,WACE,IAAMsG,EAASxF,KAAKG,MAAMgH,MAAM/H,eAC1BF,EAAkBc,KAAKG,MAAMgH,MAAMzH,qBACzCM,KAAKkH,SAAS,CAAE1B,SAAQtG,sBAjB5B,oBAyDE,WAAU,IAAD,OACD0I,EAAgB5H,KAAK+G,MAAMvB,OAAOkC,MACtC,SAACjI,GAAD,OAAWA,EAAMD,KAAO,EAAKuH,MAAM7H,mBAGrC,OACE,sBAAKiE,UAAU,gBAAf,UACGnD,KAAK+G,MAAMvB,OAAO/D,OAAS,GAC1B,cAAC,EAAD,CACE+D,OAAQxF,KAAK+G,MAAMvB,OACnBtG,gBAAiBc,KAAK+G,MAAM7H,gBAC5BoE,wBAAyBtD,KAAKgH,4BAC9BtB,mBAAoB1F,KAAKuH,yBAG5BK,GACC,cAAC,EAAD,CACEnI,MAAOmI,EACPjB,qBAAsB3G,KAAKoH,kCA3EvC,GAAkCrE,IAAMc,YChB3BgE,EAAgB,CACzB,CACErI,GAAI,IACJK,QAAS,8CACToD,IAAK,kKAEP,CACEzD,GAAI,IACJK,QAAS,6BACToD,IAAK,iKAEP,CACEzD,GAAI,IACJK,QAAS,oDACToD,IAAK,kKAGP,CACEzD,GAAI,IACJK,QAAS,uBACToD,IAAK,iKAGP,CACEzD,GAAI,IACJK,QAAS,0DACToD,IAAK,mKCXI6E,MAVf,WACE,IAAMX,EAAQ,IAAInI,EAAM6I,EAAe,KAEvC,OACE,8BACE,cAAC,EAAD,CAAcV,MAAOA,OCIZY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzD,SAAS0D,eAAe,SAM1BZ,M","file":"static/js/main.ccea172a.chunk.js","sourcesContent":["import { ImageStore } from \"./ts/interfaces/ImageStore.interface\";\nimport { ImageInfo } from \"./ts/interfaces/ImageInfo.interface\";\n\nclass Model {\n\n    imageStore: ImageStore;\n    selectedImageId: string;\n\n    constructor(imageList: ImageInfo[], selectedImageId: string) {\n\n        this.imageStore = imageList.reduce((imageStoreObj: ImageStore, image: ImageInfo) => (\n            { ...imageStoreObj, [image.id]: { ...image } }\n        ), {} as ImageStore);\n\n        this.selectedImageId = selectedImageId;\n    }\n\n    getAllImages = (): ImageInfo[] => {\n        return Object.keys(this.imageStore).reduce(\n            (imageList, id) => {\n              const image = this.imageStore[id];\n              if (image) {\n                imageList = [...imageList, image];\n              }\n      \n              return imageList;\n            },\n            [] as ImageInfo[]\n          );\n    }\n\n    getSelectedImageId = (): string => this.selectedImageId;\n\n    editCaption = (id: string, newCaption: string): [boolean, ImageInfo | null] => {\n        let image = this.imageStore[id];\n        if (image) {\n            image = { ...image, caption: newCaption };\n            this.imageStore[id] = image;\n            return [true, image];\n        } else {\n            return [false, null];\n        }\n    }\n\n    editSelectedImageId = (newId: string): void => {\n        this.selectedImageId = newId;\n    }\n\n}\n\nexport { Model };","import React from \"react\";\nimport { ImageInfo } from \"../../ts/interfaces/ImageInfo.interface\";\nimport { truncateInnerText } from \"../../utils\";\nimport \"./SidebarPanel.css\";\n\ninterface SidebarPanelProps {\n  image: ImageInfo;\n  isSelected: boolean;\n  onSelectedImageIdChange: (newSelectedImageId: string) => void;\n}\n\nexport class SidebarPanel extends React.Component<SidebarPanelProps> {\n  captionRef: React.RefObject<HTMLSpanElement>;\n\n  constructor(props: SidebarPanelProps) {\n    super(props);\n    this.captionRef = React.createRef<HTMLSpanElement>();\n  }\n\n  componentDidMount() {\n    this.truncateCaption();\n  }\n\n  componentDidUpdate() {\n    this.truncateCaption();\n  }\n\n  truncateCaption = () => {\n    if (this.captionRef.current) {\n      truncateInnerText(\n        this.captionRef.current,\n        this.props.image.caption,\n        2,\n        \"100%\"\n      );\n    }\n  };\n\n  handleDragStart = (evt: React.DragEvent<HTMLDivElement>) => {\n    const sidebarElement = evt.target as HTMLDivElement;\n    sidebarElement.classList.toggle(\"sidebar-panel-dragging\");\n    sidebarElement.dataset.sidebarPanelDragging = \"true\";\n  };\n\n  handleDragEnd = (evt: React.DragEvent<HTMLDivElement>) => {\n    const sidebarElement = evt.target as HTMLDivElement;\n    sidebarElement.classList.toggle(\"sidebar-panel-dragging\");\n    sidebarElement.dataset.sidebarPanelDragging = \"false\";\n  };\n\n  render() {\n    const { id, caption, src } = this.props.image,\n      isSelected = this.props.isSelected;\n    return (\n      <div\n        className={`sidebar-panel ${\n          isSelected ? \"sidebar-panel-selected\" : \"\"\n        }`}\n        tabIndex={0}\n        data-sidebar-panel-id={id}\n        onClick={() => {\n          this.props.onSelectedImageIdChange(id);\n        }}\n        draggable=\"true\"\n        onDragStart={this.handleDragStart}\n        onDragEnd={this.handleDragEnd}\n      >\n        <img\n          className=\"sidebar-panel_image\"\n          height=\"40px\"\n          width=\"40px\"\n          src={src}\n          alt={caption}\n        />\n        <span ref={this.captionRef} className=\"sidebar-panel_caption\">\n          {caption}\n        </span>\n      </div>\n    );\n  }\n}\n","const truncateInnerText = (\n    domElement: HTMLElement ,\n    elementInnerText: string,\n    maxNumberOfLines: number,\n    maxWidth: string\n  ) => {\n    domElement.style.overflow = \"auto\";\n  \n    const maxHeight =\n      Number(window.getComputedStyle(domElement).lineHeight.slice(0, -2)) *\n      maxNumberOfLines;\n  \n    if (maxWidth) {\n      domElement.style.width = maxWidth;\n    }\n  \n    const letters = elementInnerText.split(\"\");\n    if (domElement.clientHeight <= maxHeight) {\n      domElement.style.overflow = \"hidden\";\n      return;\n    }\n  \n    let left = 0,\n      right = letters.length / 2;\n  \n    while (left <= right) {\n\n        const mid = Math.floor(left + (right - left) / 2);\n\n      const leftletters = letters.filter((_, ind) => ind < mid);\n      const rightletters = letters.filter(\n        (_, ind) => ind >= letters.length - mid\n      );\n  \n      const previousInnerText = domElement.innerText;\n  \n      domElement.innerText = leftletters.join(\"\") + \"...\" + rightletters.join(\"\");\n  \n      if (domElement.clientHeight <= maxHeight) {\n        left = mid + 1;\n      } else {\n        domElement.innerText = previousInnerText;\n        right = mid - 1;\n      }\n    }\n  \n    domElement.style.overflow = \"hidden\";\n  };\n\nconst eventDeboune = (eventHandler: (...args: any[]) => any) => {\n    let timer: any;\n    return function (this: any ,...args: any[]) {\n      let self = this;\n      if (timer) {\n        cancelAnimationFrame(timer);\n      }\n      timer = requestAnimationFrame(() => {\n        eventHandler.apply(self, [...args]);\n        timer = undefined;\n      });\n    };\n  };\n  \nexport {truncateInnerText, eventDeboune};","import React from \"react\";\nimport { SidebarPanel } from \"../sidebarPanel/SidebarPanel\";\nimport { ImageInfo } from \"../../ts/interfaces/ImageInfo.interface\";\nimport { eventDeboune } from \"../../utils\";\n\ninterface SidebarProps {\n  images: ImageInfo[];\n  selectedImageId: string;\n  onSelectedImageIdChange: (newSelectedImageId: string) => void;\n  onImageOrderChange: (imageId: string, newPos: number) => void;\n}\n\ninterface ClosestPanelInfo {\n  closestPanelBelow: HTMLDivElement | null;\n  offset: number;\n}\n\nexport class Sidebar extends React.Component<SidebarProps> {\n  componentDidMount() {\n    document.addEventListener(\"keydown\", (evt) => {\n      if (evt.key === \"Enter\" && document.activeElement) {\n        const activeElement = document.activeElement;\n        const sidebarPanelId = activeElement.getAttribute(\n          \"data-sidebar-panel-id\"\n        );\n\n        if (sidebarPanelId) {\n          this.props.onSelectedImageIdChange(sidebarPanelId);\n        }\n      }\n    });\n  }\n\n  findClosestPanelBelow = (\n    yPos: number,\n    sidebarPanels: NodeListOf<HTMLDivElement>\n  ): ClosestPanelInfo => {\n    return Array.from(sidebarPanels).reduce(\n      (closest, sidebarPanel) => {\n        const boundingBox = sidebarPanel.getClientRects()[0],\n          midPoint = boundingBox.top + boundingBox.height / 2,\n          offset = yPos - midPoint;\n        return offset < 0 && offset > closest.offset\n          ? { closestPanelBelow: sidebarPanel, offset }\n          : closest;\n      },\n      {\n        closestPanelBelow: null,\n        offset: Number.NEGATIVE_INFINITY,\n      } as ClosestPanelInfo\n    );\n  };\n\n  handleDragOver = (evt: React.DragEvent<HTMLDivElement>) => {\n    console.log(\"Drag Over\");\n    const draggingSidebarPanel = document.querySelector(\n      '[data-sidebar-panel-dragging=\"true\"]'\n    ) as HTMLDivElement;\n    if (draggingSidebarPanel) {\n      const sidebarPanels = document.querySelectorAll(\n        \"[data-sidebar-panel-id]\"\n      ) as NodeListOf<HTMLDivElement>;\n\n      const { closestPanelBelow } = this.findClosestPanelBelow(\n        evt.clientY,\n        sidebarPanels\n      );\n\n      if (closestPanelBelow && closestPanelBelow !== draggingSidebarPanel) {\n        const draggingSidebarPanelId =\n          draggingSidebarPanel.dataset.sidebarPanelId;\n        const closestPanelBelowIndex = this.props.images.findIndex(\n          (image) => image.id === closestPanelBelow.dataset.sidebarPanelId\n        );\n        if (draggingSidebarPanelId) {\n          this.props.onImageOrderChange(\n            draggingSidebarPanelId,\n            closestPanelBelowIndex\n          );\n        }\n      }\n    }\n  };\n\n  render() {\n    const { images, selectedImageId } = this.props;\n\n    return (\n      <div\n        onDragOver={(evt) => {\n          eventDeboune(this.handleDragOver)(evt);\n        }}\n        className=\"sidebar\"\n      >\n        {images &&\n          images.map((image) => (\n            <SidebarPanel\n              key={image.id}\n              image={image}\n              onSelectedImageIdChange={this.props.onSelectedImageIdChange}\n              isSelected={selectedImageId === image.id}\n            />\n          ))}\n      </div>\n    );\n  }\n}\n","import { ImageInfo } from \"../../ts/interfaces/ImageInfo.interface\";\nimport \"./DisplayContainer.css\";\n\ninterface DisplayContainerProps {\n  image: ImageInfo;\n  onImageCaptionChange: (imageId: string, newCaption: string) => void;\n}\n\nexport const DisplayContainer = ({\n  image,\n  onImageCaptionChange,\n}: DisplayContainerProps) => {\n  const { id, src, caption } = image;\n\n  const handleImageCaptionChange = (\n    evt: React.ChangeEvent<HTMLTextAreaElement>\n  ) => {\n    const newCaption = evt.target.value;\n    onImageCaptionChange(id, newCaption);\n  };\n\n  return (\n    <div className=\"display-container\">\n      <img\n        className=\"display-container_image\"\n        height=\"400px\"\n        width=\"200px\"\n        src={src}\n        alt={caption}\n      />\n      <textarea\n        className=\"display-container_caption\"\n        value={caption}\n        onChange={handleImageCaptionChange}\n      ></textarea>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Sidebar } from \"../sidebar/Sidebar\";\nimport { DisplayContainer } from \"../displayContainer/DisplayContainer\";\nimport { Model } from \"../../model\";\nimport { ImageInfo } from \"../../ts/interfaces/ImageInfo.interface\";\nimport \"./ImageGallery.css\";\n\ninterface ImageGalleryProps {\n  model: Model;\n}\n\ninterface ImageGalleryState {\n  images: ImageInfo[];\n  selectedImageId: string;\n}\n\nexport class ImageGallery extends React.Component<\n  ImageGalleryProps,\n  ImageGalleryState\n> {\n  state: ImageGalleryState;\n\n  constructor(props: ImageGalleryProps) {\n    super(props);\n    this.state = {\n      images: [],\n      selectedImageId: \"\",\n    };\n  }\n\n  componentDidMount() {\n    const images = this.props.model.getAllImages();\n    const selectedImageId = this.props.model.getSelectedImageId();\n    this.setState({ images, selectedImageId });\n  }\n\n  handleSelectedImageIdChange = (newSelectedImageId: string) => {\n    this.setState({ selectedImageId: newSelectedImageId });\n    this.props.model.editSelectedImageId(newSelectedImageId);\n  };\n\n  handleImageCaptionChange = (imageId: string, newCaption: string) => {\n    this.setState((prevState) => ({\n      images: prevState.images.map((image) =>\n        image.id !== imageId ? image : { ...image, caption: newCaption }\n      ),\n    }));\n\n    this.props.model.editCaption(imageId, newCaption);\n  };\n\n  handleImageOrderChange = (imageId: string, newPos: number) => {\n    const imageToBeInserted = this.state.images.find(\n      (image) => image.id === imageId\n    );\n\n    if (imageToBeInserted) {\n      const insertElement = (filteredList: ImageInfo[]): ImageInfo[] => {\n        return [\n          ...filteredList.slice(0, newPos),\n          imageToBeInserted,\n          ...filteredList.slice(newPos),\n        ];\n      };\n\n      this.setState((prevState) => ({\n        images: insertElement(\n          prevState.images.filter((image) => image.id !== imageId)\n        ),\n      }));\n    }\n  };\n\n  render() {\n    const selectedImage = this.state.images.find(\n      (image) => image.id === this.state.selectedImageId\n    );\n\n    return (\n      <div className=\"image-gallery\">\n        {this.state.images.length > 0 && (\n          <Sidebar\n            images={this.state.images}\n            selectedImageId={this.state.selectedImageId}\n            onSelectedImageIdChange={this.handleSelectedImageIdChange}\n            onImageOrderChange={this.handleImageOrderChange}\n          />\n        )}\n        {selectedImage && (\n          <DisplayContainer\n            image={selectedImage}\n            onImageCaptionChange={this.handleImageCaptionChange}\n          />\n        )}\n      </div>\n    );\n  }\n}\n","export const fakeImageData = [\n    {\n      id: \"1\",\n      caption: \"Photo of a brown jelly fish in blue water. \",\n      src: \"https://images.unsplash.com/photo-1590013330451-3946e83e0392?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=3634&q=80\",\n    },\n    {\n      id: \"2\",\n      caption: \"Palm tree under a blue sky\",\n      src: \"https://images.unsplash.com/photo-1529061333663-08226b29f6ba?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=934&q=80\",\n    },\n    {\n      id: \"3\",\n      caption: \"Snow covered pine trees during winter in Romania.\",\n      src: \"https://images.unsplash.com/photo-1614497883639-e7e3fba976fd?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=3634&q=80\",\n    },\n  \n    {\n      id: \"4\",\n      caption: \"Waterfall in Orlando\",\n      src: \"https://images.unsplash.com/photo-1524338198850-8a2ff63aaceb?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=958&q=80\",\n    },\n  \n    {\n      id: \"5\",\n      caption: \"A blue and brown kingfisher pictured in Ontario, Canada\",\n      src: \"https://images.unsplash.com/photo-1601544829024-bc7f4c2213c5?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1306&q=80\",\n    },\n  ];","import \"./App.css\";\nimport { Model } from \"./model\";\nimport { ImageGallery } from \"./components/imageGallery/ImageGallery\";\nimport { fakeImageData } from \"./fakeData\";\n\nfunction App() {\n  const model = new Model(fakeImageData, \"2\");\n\n  return (\n    <div>\n      <ImageGallery model={model} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}